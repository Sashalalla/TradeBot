import logging
import pandas as pd
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes
)
from datetime import time
import pytz

TOKEN = '7639729513:AAEoXUYk4sQDRWb03lt3VMWuXkFe1Bu7Zik'
ALPHA_VANTAGE_API_KEY = '6IO85LUA6K3PISYB'  # —Ç–≤–æ–π –∫–ª—é—á

logging.basicConfig(level=logging.INFO)

main_menu = ReplyKeyboardMarkup([
    [KeyboardButton("üìä –î–∞–π —Å–¥–µ–ª–∫—É"), KeyboardButton("üìâ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")],
    [KeyboardButton("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É"), KeyboardButton("üìà –ö–∞–∫–æ–π —Ä—ã–Ω–æ–∫ —Å–µ–π—á–∞—Å?")]
], resize_keyboard=True)

users_to_monitor = set()
SYMBOL = 'EURUSD'
kiev_tz = pytz.timezone("Europe/Kyiv")


def get_market_data(symbol):
    url = f"https://www.alphavantage.co/query?function=FX_INTRADAY&from_symbol={symbol[:3]}&to_symbol={symbol[3:]}&interval=1min&apikey={ALPHA_VANTAGE_API_KEY}"
    response = requests.get(url)
    data = response.json()
    if "Time Series FX (1min)" not in data:
        return None
    df = pd.DataFrame.from_dict(data['Time Series FX (1min)'], orient='index')
    df = df.rename(columns={
        '1. open': 'open',
        '2. high': 'high',
        '3. low': 'low',
        '4. close': 'close'
    })
    df = df.astype(float)
    df = df.sort_index()
    return df


def analyze(df):
    df['sma'] = df['close'].rolling(window=14).mean()
    delta = df['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df['rsi'] = 100 - (100 / (1 + rs))
    latest = df.iloc[-1]

    if latest['rsi'] < 30 and latest['close'] > latest['sma']:
        return ("CALL", 85)
    elif latest['rsi'] > 70 and latest['close'] < latest['sma']:
        return ("PUT", 80)
    else:
        return ("WAIT", 50)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users_to_monitor.add(chat_id)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–∞—Ä–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥—É. –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É ‚¨á",
        reply_markup=main_menu
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SYMBOL
    text = update.message.text
    chat_id = update.effective_chat.id

    if text == "üìä –î–∞–π —Å–¥–µ–ª–∫—É":
        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")
        df = get_market_data(SYMBOL)
        if df is None:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return
        direction, confidence = analyze(df)
        if direction == "WAIT" or confidence < 70:
            await update.message.reply_text("ü§î –Ø –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Ä—ã–Ω–∫–µ —Å–µ–π—á–∞—Å. –õ—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å.")
        else:
            await update.message.reply_text(
                f"üì¢ –°–∏–≥–Ω–∞–ª: {direction}\nüí∏ –í–∞–ª—é—Ç–∞: {SYMBOL}\n‚è±Ô∏è –í—Ä–µ–º—è: 1-5 –º–∏–Ω—É—Ç\n‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%"
            )

    elif text == "üìâ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é":
        users_to_monitor.discard(chat_id)
        await update.message.reply_text("üõë –°–¢–û–ü –¢–†–ï–ô–î! –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    elif text == "üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É":
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: GBPUSD):")
        context.user_data['await_symbol'] = True

    elif text == "üìà –ö–∞–∫–æ–π —Ä—ã–Ω–æ–∫ —Å–µ–π—á–∞—Å?":
        df = get_market_data(SYMBOL)
        if df is None:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return
        direction, confidence = analyze(df)
        if confidence > 80:
            mood = "‚úÖ –°–ø–æ–∫–æ–π–Ω—ã–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤—Ö–æ–¥–∞"
        elif confidence > 60:
            mood = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π ‚Äî –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω"
        else:
            mood = "üö® –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π/–æ–ø–∞—Å–Ω—ã–π —Ä—ã–Ω–æ–∫"
        await update.message.reply_text(
            f"üìä –¢–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫: {mood}\n–ü–∞—Ä–∞: {SYMBOL}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%"
        )

    elif context.user_data.get('await_symbol'):
        SYMBOL = text.upper()
        context.user_data['await_symbol'] = False
        await update.message.reply_text(f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {SYMBOL}")

    else:
        await update.message.reply_text("üòÖ –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.")


async def morning_analysis(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in users_to_monitor:
        df = get_market_data(SYMBOL)
        if df is not None:
            direction, confidence = analyze(df)
            await context.bot.send_message(chat_id, f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–ê–Ω–∞–ª–∏–∑ –ø–æ {SYMBOL}: {direction}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")


async def evening_stop(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in users_to_monitor:
        await context.bot.send_message(chat_id, "üåô –£–∂–µ 18:00 –ø–æ –ö–∏–µ–≤—É.\nüö´ –°–¢–û–ü –¢–†–ï–ô–î! –õ—É—á—à–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é.")


async def auto_monitor(context: ContextTypes.DEFAULT_TYPE):
    df = get_market_data(SYMBOL)
    if df is None:
        return
    direction, confidence = analyze(df)
    if direction != "WAIT" and confidence >= 80:
        for chat_id in users_to_monitor:
            await context.bot.send_message(chat_id,
                                           f"üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!\n–°–∏–≥–Ω–∞–ª: {direction}\n–ü–∞—Ä–∞: {SYMBOL}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")


if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.job_queue.run_daily(morning_analysis, time(hour=8, minute=0, tzinfo=kiev_tz))
    app.job_queue.run_daily(evening_stop, time(hour=18, minute=0, tzinfo=kiev_tz))
    app.job_queue.run_repeating(auto_monitor, interval=120, first=10)

    app.run_polling()
