import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from datetime import datetime, timedelta, time
import pytz
import finnhub
import pandas as pd

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = '7639729513:AAEoXUYk4sQDRWb03lt3VMWuXkFe1Bu7Zik'
FINNHUB_API_KEY = 'd10toqhr01qse6le0l2gd10toqhr01qse6le0l30'
SYMBOL = 'EUR_USD'
users_to_monitor = set()
kiev_tz = pytz.timezone('Europe/Kyiv')

# === Finnhub –∫–ª–∏–µ–Ω—Ç ===
finnhub_client = finnhub.Client(api_key=FINNHUB_API_KEY)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ ===
def get_market_data(symbol='EUR_USD'):
    try:
        full_symbol = f'OANDA:{symbol.upper()}'
        now = datetime.utcnow()
        from_time = int((now - timedelta(hours=24)).timestamp())
        to_time = int(now.timestamp())

        res = finnhub_client.forex_candles(full_symbol, '5', _from=from_time, to=to_time)

        if res['s'] != 'ok' or not res.get('t'):
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
            return None

        df = pd.DataFrame({
            'timestamp': res['t'],
            'open': res['o'],
            'high': res['h'],
            'low': res['l'],
            'close': res['c'],
            'volume': res['v']
        })
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')
        df.set_index('timestamp', inplace=True)
        return df

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# === –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞) ===
def analyze(df):
    last = df['close'].iloc[-1]
    prev = df['close'].iloc[-5]
    direction = "BUY" if last > prev else "SELL"
    confidence = round(abs(last - prev) / prev * 100, 2)
    if confidence < 0.05:
        return "WAIT", 0
    return direction, min(confidence * 10, 99)

# === Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: CallbackContext):
    users_to_monitor.add(update.effective_chat.id)
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data='start_trade')],
        [InlineKeyboardButton("üõë –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data='stop_trade')],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data='continue_trade')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.data == 'start_trade':
        await query.edit_message_text(text="üöÄ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞—á–∞—Ç–∞.")
    elif query.data == 'stop_trade':
        await query.edit_message_text(text="üõë –°–¢–û–ü –¢–†–ï–ô–î. –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    elif query.data == 'continue_trade':
        await query.edit_message_text(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é.")

async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip().upper()
    global SYMBOL
    if text in ["EUR_USD", "GBP_USD", "USD_JPY"]:  # –¥–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã
        SYMBOL = text
        await update.message.reply_text(f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {SYMBOL}")
    elif "–ê–ù–ê–õ–ò–ó" in text:
        df = get_market_data(SYMBOL)
        if df is None:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        direction, confidence = analyze(df)
        await update.message.reply_text(f"üìä –°–∏–≥–Ω–∞–ª: {direction}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")
    else:
        await update.message.reply_text("üòÖ –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: EUR_USD).")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ ===
async def morning_analysis(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in users_to_monitor:
        df = get_market_data(SYMBOL)
        if df is not None:
            direction, confidence = analyze(df)
            await context.bot.send_message(chat_id, f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ {SYMBOL}:\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")

async def evening_stop(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in users_to_monitor:
        await context.bot.send_message(chat_id, "üåô –£–∂–µ 18:00 –ø–æ –ö–∏–µ–≤—É.\nüö´ –°–¢–û–ü –¢–†–ï–ô–î! –õ—É—á—à–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é.")

async def auto_monitor(context: ContextTypes.DEFAULT_TYPE):
    df = get_market_data(SYMBOL)
    if df is None:
        return
    direction, confidence = analyze(df)
    if direction != "WAIT" and confidence >= 80:
        for chat_id in users_to_monitor:
            await context.bot.send_message(chat_id,
                f"üì¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–¥–µ–ª–∫–∏!\n–°–∏–≥–Ω–∞–ª: {direction}\n–ü–∞—Ä–∞: {SYMBOL}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if name == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.job_queue.run_daily(morning_analysis, time(hour=8, minute=0, tzinfo=kiev_tz))
    app.job_queue.run_daily(evening_stop, time(hour=18, minute=0, tzinfo=kiev_tz))
    app.job_queue.run_repeating(auto_monitor, interval=120, first=10)

    app.run_polling()
